{"version":3,"sources":["components/Section/Section.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/Section/Section.jsx","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","contact","payload","id","shortid","generate","deleteContact","filterContacts","contacts","createReducer","name","number","state","action","filter","_","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","rootReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","Section","title","children","className","styles","section","getContacts","getFilter","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","target","value","onSubmit","e","preventDefault","currentTarget","find","el","alert","actions","s","label","type","input","pattern","required","onChange","btnAdd","ContactList","visibleContacts","toLowerCase","includes","list","map","btnDelete","onClick","Filter","filterValue","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.185ac600.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2clQ_\",\"title\":\"Section_title__2RoP8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsListItem\":\"ContactList_contactsListItem__DOtUp\",\"btnDelete\":\"ContactList_btnDelete__39Y5k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1bY-h\",\"label\":\"Filter_label__3ciPt\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nexport const addContact = createAction('phoneBook/addContact', contact => {\r\n    return {\r\n        payload: {\r\n            ...contact,\r\n            id: shortid.generate(),\r\n        },\r\n    };\r\n});\r\nexport const deleteContact = createAction('phoneBook/deleteContact');\r\nexport const filterContacts = createAction('phoneBook/filter');","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, filterContacts } from './contacts-actions';\r\n\r\nconst initialContacts = [\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst contacts = createReducer(initialContacts, {\r\n    [addContact]: (state, action) => {\r\n        return [...state, action.payload];\r\n    },\r\n    [deleteContact]: (state, action) => {\r\n        return state.filter(contact => contact.id !== action.payload);\r\n    },\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [filterContacts]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({ contacts, filter });","\r\n// import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\n// import logger from \"redux-logger\";\r\n\r\n// // const initialState = {\r\n// //     contacts: [],\r\n// // }\r\n\r\n// // const reducer = (state = initialState, { type, payload }) => {\r\n// //     switch (type) {\r\n// //         case 'contact/add':\r\n// //             return {\r\n// //                 contacts: [...state.contacts + payload],\r\n// //             };\r\n// //         case 'contact/delete':\r\n// //             return {\r\n// //                 contacts: [...state.contacts - payload],\r\n// //             };\r\n// //         default:\r\n// //             return state;\r\n// //     }\r\n// // };\r\n// const middleware = [...getDefaultMiddleware(), logger]\r\n// const store = configureStore({\r\n//     reducer: {\r\n//         contactsReducer,\r\n//     },\r\n//     middleware,\r\n//     devTools: process.env.NODE_ENV === 'development'\r\n// });\r\n\r\n// export default store;\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport rootReducers from './contacts/contacts-reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n    reducer: persistReducer(persistConfig, rootReducers),\r\n\r\n    middleware: getDefaultMiddleware => [\r\n        ...getDefaultMiddleware({\r\n            serializableCheck: {\r\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n            },\r\n        }),\r\n    ],\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);","import PropTypes from 'prop-types';\r\nimport styles from './Section.module.css'\r\n\r\nconst Section = ({ title, children}) => {\r\n    return (<section className={styles.section}><h1 className={styles.title}>{title}</h1>\r\n    {children}</section>\r\n    )\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node\r\n}","export const getContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport { getContacts } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    name === \"name\" ? setName(value) : setNumber(value);\r\n  };\r\n\r\n  function reset() {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const contact = {\r\n      name: e.currentTarget.name.value,\r\n      number: e.currentTarget.number.value,\r\n    };\r\n    if (contacts.find((el) => el.name === contact.name)) {\r\n      alert(`${contact.name} is already in contacts!`);\r\n    } else {\r\n      dispatch(actions.addContact(contact));\r\n    }\r\n    reset();\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name:\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          className={s.input}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n        ></input>\r\n      </label>\r\n      <label className={s.label}>\r\n        Phone:\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          className={s.input}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n          value={number}\r\n          onChange={handleChange}\r\n        ></input>\r\n      </label>\r\n      <button type=\"submit\" className={s.btnAdd}>\r\n        ADD CONTACT\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n// import PropTypes from 'prop-types';\r\n\r\n// import { useState } from \"react\";\r\n// import { nanoid } from 'nanoid';\r\n// import styles from \"./ContactForm.module.css\"\r\n\r\n// const ContactForm = ({ changeContact }) => {\r\n//     const [name, setName] = useState(\"\");\r\n//     const [number, setNumber] = useState(\"\");\r\n\r\n// const handleNameChange = (event) => {\r\n//     const {  value } = event.currentTarget;\r\n\r\n//     setName( value );\r\n//   };\r\n\r\n//   const handleNumberChange = (event) => {\r\n//     const { value } = event.currentTarget;\r\n\r\n//     setNumber(value);\r\n//   };\r\n// const nameInputId = nanoid();\r\n// const numberInputId = nanoid();\r\n\r\n// const addContact = (event) => {\r\n//         event.preventDefault();\r\n\r\n//         changeContact(name, number);\r\n\r\n//     setName( \"\");\r\n//     setNumber(\"\");\r\n//   };\r\n\r\n// return (<>\r\n//             <form onSubmit={addContact}>\r\n//                 <label className={styles.label} htmlFor={nameInputId}>Name\r\n//                     <input className={styles.input}\r\n//                         type=\"text\"\r\n//                         name=\"name\"\r\n//                         value={name}\r\n//                         onChange={handleNameChange}\r\n//                         id={nameInputId}\r\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                         required\r\n//                     /></label>\r\n//                 <label className={styles.label} htmlFor={numberInputId}>Number\r\n//                     <input className={styles.input}\r\n//                         type=\"tel\"\r\n//                         value={number}\r\n//                         onChange={handleNumberChange}\r\n//                         id={numberInputId}\r\n//                         name=\"number\"\r\n//                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                         required\r\n//                     /></label>\r\n//                 <button className={styles.btnAdd} type=\"submit\">Add contact</button>\r\n//             </form>\r\n//         </>);\r\n//     };\r\n\r\n// export default ContactForm;\r\n\r\n// ContactForm.propTypes = {\r\n//     changeContact: PropTypes.func.isRequired\r\n// }\r\n","// import PropTypes from \"prop-types\";\r\n// import styles from \"./ContactList.module.css\";\r\n\r\n// const ContactList = ({ contacts, deleteFunction }) => {\r\n//     const renderContacts = contacts.map(({id, name, number}) => (\r\n//         <li key={name} className={styles.contactsListItem}>{name} {number}\r\n//         <button onClick={() => deleteFunction(id)} className={styles.btnDelete} >X</button>\r\n//         </li>\r\n\r\n//         ))\r\n\r\n//     return (\r\n//         <ul className={styles.contactsList}>\r\n//             {renderContacts }</ul>)\r\n// }\r\nimport React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport {\r\n  getContacts,\r\n  getFilter,\r\n} from \"../../redux/contacts/contacts-selectors\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nfunction ContactList() {\r\n  const contacts = useSelector(getContacts);\r\n  const filter = useSelector(getFilter);\r\n  const visibleContacts = contacts.filter((contact) => {\r\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\r\n  });\r\n  const dispatch = useDispatch();\r\n  const deleteContact = (id) => dispatch(actions.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {visibleContacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button className={s.btnDelete} onClick={() => deleteContact(id)}>\r\n            X\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nexport default ContactList;\r\n\r\nconst contactShape = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.shape(contactShape)).isRequired,\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport { getFilter } from \"../../redux/contacts/contacts-selectors\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nfunction Filter() {\r\n  const filterValue = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const changeFilter = (e) => dispatch(actions.filterContacts(e.target.value));\r\n\r\n  return (\r\n    <label className={s.label}>\r\n      Filter{\" \"}\r\n      <input\r\n        type=\"text\"\r\n        className={s.input}\r\n        name=\"filter\"\r\n        value={filterValue}\r\n        onChange={changeFilter}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n\r\n// import PropTypes from 'prop-types';\r\n// import styles from './Filter.module.css';\r\n\r\n// const Filter = ({ filter, handleChange,filterInputId }) => {\r\n\r\n//   return (\r\n//       <>\r\n//         <label className={styles.label} htmlFor={filterInputId}>Find contacts by name\r\n//           <input className={styles.input}\r\n//             type=\"text\"\r\n//             name=\"filter\"\r\n//             value={filter}\r\n//             onChange={handleChange}\r\n//             id={filterInputId}\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n//             required\r\n//           /></label>\r\n//       </>)\r\n// }\r\n// export default Filter;\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string.isRequired,\r\n//   handleChange:PropTypes.func.isRequired\r\n// }\r\n","\n\n// import { useState, useEffect, useRef } from \"react\";\n// import { nanoid } from 'nanoid';\n\nimport Section from './components/Section';\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\"\n\n\n// const initialContacts = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n\n// ];\n\nconst App = () => {\n  // const [contacts, setContacts] = useState(initialContacts);\n  // const [filter, setFilter] = useState(\"\")\n  // const isFirstRender = useRef(true);\n\n\n  // const filterInputId = nanoid();\n\n  // useEffect(() => {\n  //   if (isFirstRender.current) {\n  //     isFirstRender.current = false;\n  //     const contacts = localStorage.getItem('contacts');\n  //     const parsedContacts = JSON.parse(contacts);\n  //     if (parsedContacts) {\n  //       setContacts(parsedContacts);\n  //     }\n  //     return;\n  //   }\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }\n  //   , [contacts]);\n\n\n  // const changeContact = (name, number) => {\n  //   if (contacts.find((contact) => {\n  //     return contact.name.toLowerCase() === name.toLowerCase();\n  //   })) {\n  //     alert(name + \" is already in contacts.\");\n  //     return;\n  //   }\n  //   const newContact = {\n  //     id: nanoid(),\n  //     name: name,\n  //     number: number\n  //   };\n  //   setContacts(prevState => {\n  //     return ([...prevState, newContact]\n  //     );\n  //   })\n  // };\n\n  // const handleContactChange = (event) => {\n  //   const { name, value } = event.currentTarget;\n\n  //   setContacts({ [name]: value });\n  // };\n\n\n  // const handleFilterChange = (event) => {\n  //   const { value } = event.currentTarget;\n\n  //   setFilter(value);\n  // };\n\n\n  // const deleteContact = (contactId) => {\n  //   setContacts(prevState => prevState.filter(contact => contact.id !== contactId)\n  //   );\n  // };\n\n  // const getFiltered = () => {\n  //   if (!filter) {\n  //     return contacts;\n  //   }\n  //   const normalizeFilter = filter.toLowerCase();\n\n  //   const filteredContacts = contacts.filter(({ name }) => {\n  //     const normalizeName = name.toLowerCase();\n  //     const result = normalizeName.includes(normalizeFilter);\n  //     return result;\n  //   })\n\n  //   return filteredContacts;\n  // }\n  // const filteredContacts = getFiltered();\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm\n        // handleChange={handleContactChange} changeContact={changeContact}\n        />\n      </Section>\n      <Section title='Contacts'>\n        <Filter\n        // filter={filter} handleChange={handleFilterChange} filterInputId={filterInputId}\n        />\n        <ContactList\n        // contacts={filteredContacts} deleteFunction={deleteContact}\n        />\n\n      </Section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__3owqz\",\"input\":\"ContactForm_input__bnIT1\",\"btnAdd\":\"ContactForm_btnAdd__1NLTx\"};"],"sourceRoot":""}